# -*- coding: utf-8 -*-
"""
검색: 저장되어 있는 자료 중에서 원하는 항목을 찾는 작업
-> 원하는 항목: 목적하는 탐색키를 가진 항목
-> 탐색키(Search key): 자료를 구별하여 인식할 수 있는 키

검색 알고리즘의 종류
1. 순차 검색(Sequential Search)
2. 이진 검색(Binary Search)
3. 인덱싱(Indexing)


1. 순차검색
일렬로 되어 있는 자료를 순서대로 검색하는 방법
List나 연결 List 등 순차구조로 구현된 자료구조에서 유용함
구현이 쉽지만, 검색 대상이 많은 경우 수행시간의 증가로 비효율적임
2가지 경우가 있음
-> 정렬된 경우
-> 정렬되지 않은 경우

* 정렬되지 않은 자료의 검색 과정
1) 첫번쨰 원소부터 순서대로 검색대상과 키 값이 같은 원소가 있는지를 비교
2) 키 값이 동일한 원소를 찾으면 그 원소의 인덱스를 반환
3) 자료구조의 마지막에 갈 때까지 검색 대상을 찾지 못하면 검색 실패

* 찾고자 하는 원소의 순서에 따른 비교 횟수 결정
시간 복잡도: O(n)

* 정렬된 자료의 검색 과정
1) 자료가 오름차순으로 정렬된 상태에서 검색을 실시한다고 가정
2) 자료를 순차적으로 검색하면서 키 값을 비교함
3) 원소의 키 값이 검색 대상의 키 값보다 크면 원소가 없다는 것이므로
   더 이상 검색하지 않고 종료

* 찾고자 하는 원소의 순서에 따른 비교 횟수 결정
시간 복잡도: O(n)


2. 이진 검색
효율적인 검색 방법
자료의 가운데 항목의 키 값과 비교하여 다음 검색의 위치를 결정하고 검색을 계속하는 방법
-> 목적 키를 찾을 때까지 이진 검색을 순환적으로 반복 수행함으로써
   검색 범위를 반으로 줄여가면서 빠르게 검색을 수행함
이진 검색을 하기 위해서는 자료가 정렬된 상태여야 함
정렬된 데이터 n개가 있는 경우의 시간 복잡도
-> 순차 검색 시 O(N)의 시간이 걸리지만, 이진 검색 시 O(logN)의 시간이 걸림

* 이진 검색의 검색 과정
1) 자료의 중앙에 있는 원소 선택
2) 중앙 원소의 값과 찾고자 하는 목표 값을 비교
3) 목표값 < 중앙원소의 값 : 자료의 왼쪽 반에 대해서 새로 검색을 수행
   목표값 > 중앙원소의 값 : 자료의 오른쪽 반에 대해서 새로 검색을 수행
4) 찾고자 하는 값을 찾을 떄까지 [1 ~ 3]의 과정을 반복

* 검색 범위의 시작점과 종료점을 이용
-> 검색 범위의 시작점과 종료점을 이용하여 검색의 반복 수행함
-> 이진 검색의 경우, 자료의 삽입이나 삭제가 발생하였을 때
   List의 상태를 항상 정렬 상태로 유지하는 추가 작업 필요
ex)
def binarSearch(a, key):
    start = 0
    end = len(a) - 1
    
    while start <= end:
        middle = start + (end - start) // 2
        if key == a[middle]: # 검색 성공
            return True
        elif key < a[middle]:
            end = middle - 1
        else:
            start = middle + 1
    
    return False # 검색 실패

ex) 재귀 함수를 이용한 이진 검색 구현
  def binarySearch2(a, low, high, key):
    if low > high: # 검색 실패
        return False
    else:
        middle = (low + high) // 2
        if key == a[middle]: # 검색 성공
            return True
        elif key < a[middle]:
            return binarySearch2(a, low, middle-1, key)
        elif a [middle] < key:
            return binarySearch2(a, middle+1, high, key)
        

3. 인덱스
데이터베이스(Database)에서 유래, 테이블에 대한 동작 속도를 높임
룩 업 데이블(Look up table) 등의 용어로 사용함
인덱스를 저장하는데 필요한 디스크 공간은 보통 데이블 저장에 필요한 디스크 공간보다 작음
-> 인덱스는 키-필드만 갖고 있고, 테이블의 다른 세부 항목은 갖고 있지 않음
List를 사용한 인덱스
-> 대량의 데이터를 매번 정렬하면, 프로그램의 반응은 느려질 수 밖에 없음.
   이러한 대량 데이터의 성능 저하 문제를 해결하기 위해 List 인덱스를 사용할 수 있음
원본 데이터에 데이터가 삽입될 경우 상대적으로 크기가 작은 인덱스 List를
정렬하기 떄문에 속도가 빠름


"""

























