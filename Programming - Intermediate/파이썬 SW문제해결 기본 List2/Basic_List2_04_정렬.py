# -*- coding: utf-8 -*-
"""
정렬
1. 셀렉션 알고리즘


* 셀렉션 알고리즘의 의미
-> 저장되어 있는 자료로부터 K번째로 큰 혹은 작은 원소를 찾는 방법
-> 최소값, 최대값 혹은 중간값을 찾는 알고리즘을 의미하기도 함

* 셀렉션 선택 과정
1) 정렬 알고리즘을 이용하여 자료를 정렬
2) 원하는 순서에 있는 원소 갖고오기
ex) k번째로 작은 원소를 찾는 알고리즘
def select(list, k):
    for i in range(0, k):
        minIndex = i
        for j in range(i+1, len(list)):
            if list[minIndex] > list[j]:
                minIndex = j
        list[i], list[minIndex] = list[minIndex], list[i]
    return list[k-1]

* 선택 정렬 의미
-> 주어진 자료들 중 가장 작은 값의 원소부터 차례대로 선택하여 위치를 교환하는 방식
-> 설렉션 알고리즘을 전체 자료에 적용한 것

* 정렬 과정
-> 주어진 List 중에서 최소 값을 찾음
-> 그 값을 List의 맨 앞에 위치한 값과 교환
-> 맨 처음 위치를 제외한 나머지 List를 대상으로 위의 과정을 반복

* 시간 복잡도
-> O(n^2)


* 정렬 알고리즘의 특성 비교

알고리즘    평균 수행시간    최악 수행시간    알고리즘 기법    비고
버블정렬    O(N^2)           O(n^2)          비교와 교환     코딩이 가장 손쉬움
카운팅정렬  O(n+k)           O(n+k)          비교환 방식     n이 비교적 작을 때만 가능
선택정렬    O(n^2)           O(n^2)          비교와 교환     교환의 회수가 버블, 삽입정렬보다 작음
퀵 정렬     O(n log n)       O(n^2)          분할 정복       최악의 경우 O(n^2)이지만, 평균적으로는 가장 빠름
삽입정렬    O(n^2)           O(n^2)          비교와 교환     n의 개수가 가장 작을 떄 효과적
병합정렬    O(n log n)       O(n log n)      분할 정복       연결 List의 경우 가장 효율적인 방식


"""
































