# -*- coding: utf-8 -*-
"""
DFS(깊이 우선 탐색)

DFS(깊이 우선 탐색) 방법
1. 시작 정점의 한 방향으로 갈 수 있는 경로가 있는 곳까지 깊이 탐색
2. 더 이상 갈 곳이 없게 되면, 가장 마지막에 만났던 갈림길 간선에 있는 정점으로 되돌아옴
3. 다른 방향의 정점으로 탐색을 계속 반복하여 결국 모든 정점을 방문하여 순회
4. 가장 마지막에 만났던 갈림의 정점에서 되돌아가서
   다시 깊이 우선 탐색을 반복해야 하므로 후입선출 구조의 스택을 사용

DFS(깊이 우선 탐색) 알고리즘
1. 시작 정점 v를 결정하여 방문
* 정점 v에 인접한 정점 중에서
2-1. 방문하지 않은 정점 w가 있으면, 정점 v를 스택에 push하고 정점 w를 방문
     w를 v로 하여 다시 *를 반복
2-2. 방문하지 않은 정점이 없으면, 탐색의 방향을 바꾸기 위해서 스택을 pop하여 받은
     가장 마지막 방문 정점을 v로 하여 다시 *을 반복
     
visited[], stack[] 초기화
DFS(v):
    v 방문;
    visited[v] -< true;
    do {
        if (v의 인접 정점 중 방문 안한 w 찾기):
            push(v);
        while(w) {
            w 방문;
            visited[w] <- true;
            push(w);
            v<-w;
            v의 인접 정점 중 방문 안한 w찾기
        }
        v<-pop(stack);
    } while(v)
end DFS()
    
     
"""

